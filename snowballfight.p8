pico-8 cartridge // http://www.pico-8.com
version 39
__lua__
--snowball fight!
--a work in progress


-- global lists
players = {}
snowballs = {}
snowmen = {}

-- global timers
title_screen_timer = nil

-- global state
title_screen = false

-- utility methods

-- converts anything to string, even nested tables
function tostring(any)
	if type(any)=="function" then 
		return "function" 
	end
	if any==nil then 
		return "nil" 
	end
	if type(any)=="string" then
		return any
	end
	if type(any)=="boolean" then
		if any then return "true" end
		return "false"
	end
	if type(any)=="table" then
		local str = "{ "
		for k,v in pairs(any) do
			str=str..tostring(k).."->"..tostring(v).." "
			--str=str..tostring(k).."->".."n/a".." "
		end
		return str.."}"
	end
	if type(any)=="number" then
		return ""..any
	end
	return "unknown"
end


function random(minimum, maximum)
	return rnd(maximum-minimum) + minimum
end

function random_int(low, high)
	return flr(rnd(high+1-low))+low
end

function log(msg)
	printh(msg, "log.txt", false)
end

function debug(msg)
	print(msg, 20, 20, 7)
end


-- global game logic functions
function handle_controllers()
	for i,player in pairs(players) do
		local mov_x = 0
		if(btn(‚¨ÖÔ∏è,i-1)) then
			mov_x = -1
			elseif(btn(‚û°Ô∏è,i-1)) then
			mov_x = 1
		end

		local mov_y = 0
		if(btn(‚¨ÜÔ∏è,i-1)) then mov_y = -1
		elseif(btn(‚¨áÔ∏è,i-1)) then mov_y = 1 end

		player:move(mov_x, mov_y)
		
		if(btn(üÖæÔ∏è,i-1)) then
			add(snowballs, player:throw_snowball())
		end
	end
end


function title_controllers()
	if not title_timer == nil then
		return
	end
	
	if(btnp(‚ùé,0)
			or btnp(‚ùé,1)  
			or btnp(üÖæÔ∏è,0)  
			or btnp(üÖæÔ∏è,1)) then
		title_timer = 30
		sfx(1)
	end
end

function update_snowballs()
	for s in all(snowballs) do
		if (s ~= nil) s:update()
	end
	
	for s in all(snowballs) do
		if s.frames_left == 0 then
				del(snowballs, s)
			break
		end
	end
end

function update_players()
	for p in all(players) do
		p:update()
	end
end

function update_snowmen()
	for s in all(snowmen) do
		s:update()
	end
end

function collide(x1,x1s,y1,y1s,z1,z1s,x2,x2s,y2,y2s,z2,z2s)
	
	
	if((x1+x1s) > x2) and ((x2+x2s) > x1) then
		if((y1+y1s) > y2) and ((y2+y2s) > y1) then
			if((z1+z1s) > z2) and ((z2+z2s) > z1) then
				return true
			end
		end
	end
	return false
	
	--	if (player.x+8 > self.x) and (self.x+16 > player.x) then
		--	if (player.y+5 > self.y) and (self.y+31 > player.y) then
		--		player:run_over()
		--	end
	--	end
end

function entitycollide(e1,e2)
	return collide(
		e1.x+e1.xoff,
		e1.xsize,
		e1.y+e1.xoff,
		e1.ysize,
		e1.z,
		e1.zsize,
		e2.x+e2.xoff,
		e2.xsize,
		e2.y+e2.xoff,
		e2.ysize,
		e2.z,
		e2.zsize
	)
end
	
--deprecated
function entitycollide_bak(e1,e2)
	return collide(
		e1.x+e1.xoff,
		e1.xsize,
		e1.y+e1.xoff,
		e1.ysize,
		e2.x+e2.xoff,
		e2.xsize,
		e2.y+e2.xoff,
		e2.ysize)
end

function detect_collisions()
	for s in all(snowballs) do
		if (s.active) then
			for t in all(snowmen) do
				--if collide(s.x+4,1,s.y+4,1,t.x,8,t.y,8) then
				if(entitycollide(s,t)) then
					t:hit()
					s:hit()
				end
			end
		end
	end
	
	for s in all(snowballs) do
		if (s.active) then
			for p in all(players) do
				if(entitycollide(p,s)) then
					if(s.thrower ~= p) then
						p:hit(s)
						s:hit()
					end
				end
			end
		end
	end
end

function generate_map()

end

-- pico-8 hooks
function _init()
--	title_screen = true
--	draw_title_screen()
	add(players, player:new(10,rnd(20)+20,1))
	add(players, player:new(5,rnd(20)+40,2)) 
	add(snowmen, snowman:new())
	add(snowmen, snowman:new())
	
	--test
	--mset(4,4,66)
	local mapgen = mapgen:new()
	mapgen:generate()
	mapgen:draw()
end



function _update()
	--[[
	if title_screen then
		title_controllers()
		if not (title_timer == nil) then
			title_timer -= 1
		end
		if title_timer == 0 then
			title_screen = false
			music(0)
		end
		return
	end
	]]
	
	handle_controllers()
	update_players()
	update_snowballs()
	update_snowmen()
	detect_collisions()
end

function draw_title_screen()
		cls()
		print('snowball fight!', 26, 16, 0)
		print('snowball fight!', 25, 15, 7)
		print('press ‚ùé / üÖæÔ∏è', 39, 116, 0)
		print('press ‚ùé / üÖæÔ∏è', 38, 115, 7)
		return	
end

function _draw()
	if title_screen then
		return
	end
	
	cls()
	map()
	foreach(snowballs, function(o) o:draw() end)
	foreach(snowmen, function(o) o:draw() end)
	foreach(players, function(o) o:draw() end)
end

-->8
-- player object
player = {}

function player:new(x,y,player_id)
	local o = {}
	setmetatable(o,self)
	self.__index = self
	o.x = x or 10
	o.y = y or 20
	o.dx = 0
	o.dy = 0
	o.z = 0
	o.xsize=8
	o.ysize=8
	o.zsize = 15
	o.xoff=0
	o.yoff=0
	o.zoff=0
	o.hitdx=0
	o.hitdy=0
	
	o.looking_dir = "‚¨áÔ∏è"
	o.walk_timer = nil
	o.walk_state = 0
	o.hearts = 3
	o.player_id = player_id
	o.hit_timer = nil
	o.flicker = false
	o.throw_timer = nil
	
	o.sprite_id = 1
	if(player_id == 1) then
		o.sprite_id = 2
	end
	return o
end

function player:draw()
	self:countdown_timer()
	
	if (self.hearts <= 0) then
		return
	end
	
	local so=(self.player_id-1)*3
	-- disabling walking animation for now
--	spr(self.sprite_id, self.x, self.y, 1, 1, self.is_looking_left)	
	if (self.looking_dir == "‚¨ÜÔ∏è‚¨ÖÔ∏è") then
		spr(128+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨ÜÔ∏è") then
		spr(129+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨ÜÔ∏è‚û°Ô∏è") then
		spr(130+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨ÖÔ∏è") then
		spr(144+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚û°Ô∏è") then
		spr(146+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨áÔ∏è‚¨ÖÔ∏è") then
		spr(160+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨áÔ∏è") then
		spr(161+so, self.x, self.y, 1, 1)
	elseif (self.looking_dir == "‚¨áÔ∏è‚û°Ô∏è") then
		spr(162+so, self.x, self.y, 1, 1)
	end

	--[[
	
	sprite_id = self.sprite_id
	if (self.walk_state == 1) then
		sprite_id += 1
	elseif (self.walk_state == 3) then
		sprite_id += 2
	end
	
	if not (self.hit_timer == nil) then
		self.flicker = not self.flicker
		if (self.flicker == false) then
			spr(sprite_id, self.x, self.y, 1, 1, self.is_looking_left)
		end
	else
		spr(sprite_id, self.x, self.y, 1, 1, self.is_looking_left)	
	end
	]]
	self:draw_hearts()
end

function player:countdown_timer()
	-- countdown hit timer
	if not (self.hit_timer == nil) then
		self.hit_timer -= 1
		if (self.hit_timer <= 0) then
			self.hit_timer = nil
			self.flicker = false
		end
	end
end

function player:move(mov_x, mov_y)
	
	if (mov_x == 0 and mov_y == 0) then
		self.walk_timer = nil
		self.walk_state = 0
		return
	end
	
	if (self.walk_timer == nil) then
		self.walk_timer = 5
	end
	if (self.walk_timer == 0) then
		self.walk_timer = 5
		self.walk_state += 1
		if self.walk_state > 3 then
			self.walk_state = 0
		end
	end
	
	if not (self.hit_timer == nil) then
		self.dx = mov_x * 0.3
		self.dy = mov_y * 0.3
	else
		self.dx = mov_x
		self.dy = mov_y
	end

	self.looking_dir = ""
	
	if (mov_y == 1) self.looking_dir = self.looking_dir .. "‚¨áÔ∏è"
	if (mov_y == -1) self.looking_dir = self.looking_dir .. "‚¨ÜÔ∏è"
	
	if (mov_x == 1) self.looking_dir = self.looking_dir .. "‚û°Ô∏è"
	if (mov_x == -1) self.looking_dir = self.looking_dir .. "‚¨ÖÔ∏è"

	self.x += self.dx
	self.y += self.dy

	-- boundries
	if self.y > 130 then
		self.y = 130
	elseif self.y < -8 then 
		self.y = -8
	end
	
	if self.x > 130 then
		self.x = 130
	elseif self.x < -8 then 
		self.x = -8
	end
end

function player:throw_snowball()
	if not (self.throw_timer == nil) then
		return
	end
	
	self.throw_timer = 13
	
	local s = snowball:new(self.x, self.y+2, self)
	
	--if (sub(self.looking_dir, 2, 2) == "‚¨ÖÔ∏è") then
	if (self.looking_dir == "‚¨ÖÔ∏è") then
		s.dx = -3 + random(-.04,.04)
		s.dy = random(-.15,.15)
	elseif	(self.looking_dir == "‚û°Ô∏è") then 
		s.dx = 3 + random(-.04, .04)
		s.dy = random(-.15,.15)
	end

	if (self.looking_dir == "‚¨ÜÔ∏è") then
		s.dy = -3 + random(-.04,.04)
		s.dx = random(-.15,.15)
	elseif self.looking_dir == "‚¨áÔ∏è" then
		s.dy = 3 + random(-.04, .04)
		s.dx = random(-.15,.15)
	end
	
	s.dz = 2.5

	return s
end

function player:draw_hearts()
 if (1==1) then return end
	spr(24+self.player_id, 0, (self.player_id * 10) - 7)
	for i = 1,self.hearts,1 do
		spr(24, 7 + ((i-1)*15), (self.player_id * 8)-8 + 3)
	end
end

function player:hit(snowball)
	self.hitdx += (snowball.dx/2)
	self.hitdy += (snowball.dy/2)
end

function sign(x)
	return x/abs(x)
end

function player:update()
	self.x += self.hitdx
	self.y += self.hitdy
	
	self.hitdx -= sign(self.hitdx) * .5
	self.hitdy -= sign(self.hitdy) * .5
	if(self.hitdx < 0.1) self.hitdx = 0
	if(self.hitdy < 0.1) self.hitdy = 0
	
	if not (self.throw_timer == nil) then
		self.throw_timer -= 1
		if (self.throw_timer == 0) self.throw_timer = nil
	end
end
-->8
-- snowball and snow particle objects
snowball = {}
spart = {}

function spart:new(x,y,z,dx,dy,dz)
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	o.x = x
	o.y = y
	o.z = z
	o.grav = -0.5
	
	o.dx = dx
	o.dy = dy
	o.dz = dz
	
	o.frames_left = random_int(40,300)
	
	return o
end

function spart:update()
	self.frames_left -= 1
	if (self.frames_left == 0) return
	
	self.x += self.dx
	self.y += self.dy
	self.dz +=	self.grav
	self.z += self.dz
	
	if (self.z <= 0) then
		self.z = 0
		self.dx = 0
		self.dy = 0
	end 
end

function spart:draw()
	if (self.frames_left <= 0) return
	pset(self.x+4, self.y+4 - (self.z/2), 7)
end

function snowball:new(x, y, thrower)
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	o.x = x
	o.y = y
	o.sprite_id = 0
	o.z = 0
	o.shadow = true

	o.dx = 0
	o.dy = 0
	o.dz = 0
	o.grav = -0.25
	o.active = true
	
	o.xoff = 4
	o.yoff = 4
	o.xsize = 2
	o.ysize = 2
	o.zsize = 2
	
	o.thrower = thrower
	
	o.frames_left = random_int(300,600)
	o.particles = {}
	
	return o
end

function snowball:update()
	self.frames_left -= 1
	if (self.frames_left == 0) return

	self.x += self.dx
	self.y += self.dy
	self.dz +=	self.grav
	self.z += self.dz
	if (self.z <= 0) then
		if (self.dz ~= self.grav) then
			self:splat()
		end
		self.z = 0
		self.dx = 0
		self.dy = 0
		self.dz = 0
	end
	
	for p in all(self.particles) do
		p:update()
	end
	
	if random_int(0,100) <= 2 then
		add(self.particles, 
			spart:new(self.x, self.y, self.z,
				self.dx/2, self.dy/2, self.dz)
		)
	end
end

function snowball:splat()	
	if (not self.active) return
	
	for i=1,random_int(10,16),1 do
		add(
			self.particles, 
			spart:new(
				self.x, self.y, self.z,
				self.dx/2 + random(-0.4,0.4), self.dy/2 + random(-0.4,0.4), 1.2 + random(-1,1)
			)
		)
	end
	self.active = false
end

function snowball:hit()
	local xpos = 1
	local xneg = -1
	local ypos = 1
	local yneg = -1
	
	if(self.dx>1) then
		xpos=0
	elseif (self.dx < -1) then
		xneg = 0
	end
	if(self.dy>1) then
		ypos=0
	elseif (self.dy < -1) then
		yneg = 0
	end
		
	
	for i=1,random_int(5,8),1 do
		add(
			self.particles, 
			spart:new(
				self.x, self.y, self.z,
				random(xneg,xpos), 
				random(yneg,ypos), 
				1 + random(-.5,.5)
			)
		)
	end
	self.active = false
	self.dx = 0
	self.dy = 0
	self.dz = 0
end

function snowball:is_down()
	return self.z == 0
end

function snowball:draw()
	if (self.frames_left == 0) return

	self.shadow = not self.shadow
	spr(self.sprite_id, self.x, self.y-(self.z/2))
	if (self.z ~= 0 and self.shadow) then
		spr(20, self.x, self.y)
	end
	
	for p in all(self.particles) do
		p:draw()
	end
end


-->8
-- snowman target
snowman = {}

function snowman:new()
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	o.xoff = 0
	o.yoff = 0
	o.xsize = 8
	o.ysize = 12
	o.z = 0
	o.zsize = 30
	
	o.x = random_int(64,120)
	o.y = random_int(20,114)
	o.health = 100
	o.flipx = random_int(0,1) == 0
	
	return o
end

function snowman:checkcollision(snowball)
end

function snowman:hit()
	self.health -= 10
	self.zsize = 30 - (self:states()*3)
end

function snowman:update()
	--self.health -= 1
end

function snowman:states()
	local h = self.health
	if (h >= 90) return 0
	if (h <= 90 and h > 60) return 1
	if (h <= 60 and h > 30) return 2
	if (h <= 30 and h > 0) return 3
	if (h <= 0) return 4
end

function snowman:draw()
	sprite = 42 + self:states()
	spr(sprite,
		self.x, self.y-8,
		1, 2,
		self.flipx)
	
end
-->8
-- mapdata and mapgen
mapgen = {}
mapdata = {}

function mapdata:new()
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	-- list<map_tiles>
	o.map_tiles = {} 
	log("mapdata:new()")
	return o
end


function mapdata:initialize()
	local map_tiles = {}

	log("generating map tiles")
	for y=0,15 do
		for x=0,15 do
			log(x..","..y)
			log(x+y*16)
			log("adding " .. x+y*16)
			map_tiles[x+y*16] = maptile:new(64,65)
			map_tiles[x+y*16].x = x
			map_tiles[x+y*16].y = y
			map_tiles[x+y*16]:add(102)
			map_tiles[x+y*16]:add(103)
			map_tiles[x+y*16]:add(86)
			map_tiles[x+y*16]:add(87)
			map_tiles[x+y*16]:add(70)
			map_tiles[x+y*16]:add(71)
		end
		log(tostring(map_tiles))
	end
	self.map_tiles = map_tiles
end

-- x: int, y: int
-- returns map_tile
function mapdata:get_maptile(x,y)
	return self.map_tiles[x+y*16]
end

-- x: int, y: int
-- returns list<map_tile>
function mapdata:get_maptile_neighbors(x,y)
	function add_if_notnil(list, i)
		if (not (i == nil)) then
			add(list, i)
		end
		return list
	end
	
	neighbors = {}
	neighbors = add_if_notnil(self.get_maptile(x+1,y))
	neighbors = add_if_notnil(self.get_maptile(x-1,y))
	neighbors = add_if_notnil(self.get_maptile(x,y+1))
	neighbors = add_if_notnil(self.get_maptile(x,y-1))
	return neighbors
end

-- find tiles with lowest entropy
-- returns list<maptile>
function mapdata:lowest()
	local lowest_entropy = 9999
	local l_list = {}
	
	for t in all(self.map_tiles) do
		if not t:is_collapsed() then		
			local ent = t:entropy()
			if ent == lowest_entropy then
				add(l_list, t)
			elseif ent < lowest_entropy then
				lowest_entropy = ent
				l_list = {}
				add(l_list, t)
			end
		end
	end
	
	log("found " .. count(l_list))
	return l_list
end

	--todo: cleanup below
	-- keep migrating to use mapobj

function mapgen:new()
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	self.rules = {}
	
	local r = neighbor_rules:new()
	r:add_neighbors(102,65)
	r:add_neighbors(86,102)
	r:add_neighbors(102,103)
	r:add_neighbors(86,86)
	r:add_neighbors(86,87)
	r:add_neighbors(86,70)
	r:add_neighbors(70,70)
	r:add_neighbors(70,71)
	r:add_neighbors(71,71)
	add(self.rules,r)
	o.map_tiles = {}
	
	o.mapdata = mapdata:new()
	return o
end

function mapgen:generate()
	log("mapgen:generate()")
	self:initialize()
	self:collapse()
end

function mapgen:initialize()
	self.mapdata:initialize()
end
	
function mapgen:collapse()
	log("mapgen:collapse()")
	local resolved = false
	local low_tiles = self.mapdata:lowest()
	log("low tiles")
	log(tostring(low_tiles))

	while not(#low_tiles == 0) do
		log("low tiles")
		log(tostring(low_tiles))
		
		-- find lowest entropy
		local low_ent_tile = rnd(low_tiles)
		log("collapsing tile " .. low_ent_tile.x .. ", " .. low_ent_tile.y)
		low_ent_tile:collapse()
		
		-- propogate tile changes
		self:propogate(low_ent_tile)

		self:print_all_states(map_tiles)
		
		low_tiles = self.mapdata:lowest()
	end
end

function mapgen:draw()
	log("drawing map")
	local map_tiles = self.mapdata.map_tiles
	-- draw map
	for x=0,15,1 do
		for y=0,15,1 do
			log(x .. ", " .. y)
			log(map_tiles[x+y*16].tile)
			mset(x,y,map_tiles[x+y*16].tile)
		end
	end
end

function mapgen:print_all_states(tiles)
	for t in all(tiles) do
		log(t.x..","..t.y)
		local states = ""
		for s in all(t.list_of_tiles) do
			states = states .. s .. ", "
		end
		log(states)
	end
end

function mapgen:propogate(affected_tile)

	x = affected_tile.x
	y = affected_tile.y
	
	log("collapsed " .. x .. ", " .. y)
	log("propogating...")
	log("tiles:")
	local tiles = self.mapdata.map_tiles
	log(tiles)
	for rule in all(self.rules) do
		rule:propogate(affected_tile, self.mapdata)
	end
--	self.rules:propogate(affected_tile, tiles, x+1, y)
--	self.rules:propogate(affected_tile, tiles, x-1, y)
--	self.rules:propogate(affected_tile, tiles, x, y+1)
--	self.rules:propogate(affected_tile, tiles, x, y-1)
end
-->8
-- maptile
maptile = {}

function maptile:new()
	local o = {}
	setmetatable(o,self)
	self.__index = self

	o.list_of_tiles = {}
	
	o.tile = nil
	o.x = nil
	o.y = nil
	
	return o
end

function maptile:entropy()
	return count(self.list_of_tiles)
end

function maptile:is_collapsed()
	return not (self.tile == nil)
end

function maptile:add(tile)
	add(self.list_of_tiles, tile)
end

function maptile:remove(tile)
	log("removing"..tile .." from " ..x..","..y)
	del(self.list_of_tiles, tile)
	for s in all(self.list_of_tiles) do
		log("s: " ..s)
	end
end

function maptile:collapse()
	if (self:is_collapsed()) then
		log("already collapsed")
		return
	end
	
	log("collapsing")
	log("tiles:")
	log(self.list_of_tiles)
	log(count(self.list_of_tiles))
	if(count(self.list_of_tiles) == 0 )then
		self.tile = 86
		log ("something broke")
		return
	end
	self.tile = rnd(self.list_of_tiles)
	self.list_of_tiles = {}
	add(self.list_of_tiles, self.tile)
	log("tile: " .. self.tile)
	log(self:is_collapsed())
end
-->8
-- rules
neighbor_rules = {}

function neighbor_rules:new()
	local o = {}
	setmetatable(o,self)
	self.__index = self
	
	o.list_of_nbrs = {}
	
	return o
end

function neighbor_rules:add_neighbors(tile1, tile2)
	local	neighbors = {}
	add(neighbors, tile1)
	add(neighbors, tile2)
	
	add(self.list_of_nbrs, neighbors)
end

-- source : map_tile
-- mapdata:mapdata
-- returns void 
function neighbor_rules:propogate(source, mapdata)
	local x = source.x
	local y = source.y
	self:ortho(source, mapdata.map_tiles, x+1, y)
	self:ortho(source, mapdata.map_tiles, x-1, y)
	self:ortho(source, mapdata.map_tiles, x, y+1)
	self:ortho(source, mapdata.map_tiles, x, y-1)	
end

-- source : map_tile
-- tiles : list<map_tile>
-- x : int, y : int
-- return void
function neighbor_rules:ortho(source, tiles, x, y)
	log("propogating changes to "..x..","..y)
	neighbor = tiles[x+y*16]
	if (neighbor == nil) then
		log("neighbor not found")
		return
	end
	
	local states_to_rm = {}
	
	-- tn=tile_neighbor
	for tn in all(neighbor.list_of_tiles) do
		local change = true
		-- ts = tile_source
		local ts = source.tile
		for r in all(self.list_of_nbrs) do
			if (r[1] == ts and r[2] == tn)
			  or (r[2] == ts and r[1] == tn) then 
				log("----found match")
				change = false
			end
		end
		if change then
			log("deleting from " .. neighbor.x .. ", " .. neighbor.y .. "; " .. tn)
			--del(neighbor.list_of_tiles, tn)
			--neighbor:remove(tn)
			add(states_to_rm, tn)
		end
	end
	
	log("bork2")
	log(count(states_to_rm))
	for t in all(states_to_rm) do
		log("bork")
		neighbor:remove(t)
	end
end
__gfx__
00000000000ccc000008880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c4ffc0008aff8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000c4f1c0008af18000000000000000000000000000067000000000000000000000000000000000000000000000000000000000000000000000000000
0007700000c4ffc0008aff80068ee70000aaa000000ccc00007677000008e00000eee000000dd000000000000000000000000000000000000000000000000000
00076000000c4c000008a80006888600009aa000000ccc0007767000000880000088e000001ddd00000000000000000000000000000000000000000000000000
000000000009cc90000e88e005288600000900000001cc0000dd6000000880000000000000010000000000000000000000000000000000000000000000000000
0000000000055500000ddd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000050500000d0d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
555555555555555555577555555555550000000000000000000a0a00000000000000000000000000088000880000000000000000000000000000000000000000
5557755555555555555775555555555500000000000000000000a00000000000000000000004440008e888e80000000000000000000000000000000000000000
555775555555555555577555555555550000000000000000011a11100000000000000000004fff40008eee800000000000000000000000000000000000000000
55577555555555555557755577777777000010000000000011111111000000000000000004f5f5f408e1e1e80000000000000000000000000000000000000000
55577555555555555557755577777777000111000000000011111611000000000008080004fffff408ee8ee80000000000000000000000000000000000000000
5557755555555555555775555555555500001000000000001111111100000000008e878004f888f408eeeee80000000000000000000000000000000000000000
55577555555555555557755555555555000000000000000011111111000000000008e800040fff04008eee800000000000000000000000000000000000000000
55555555555555555557755555555555000000000000000001111110000000000000800004000004000000000000000000000000000000000000000000000000
6666666666666666bbbbbbbbbbbbbbbb66666666bbbbbbbb00000000000000000000000000000000000330000000000000000000000000000000000000000000
6666666666666666bbbbbbbbbbbbbbbb66666666bbbbabbb00000000000000000000000000000000003333000003300000000000000000000000000000000000
6666666666666666bbbbbb3bbbbbbbbb66666666bbbaaabb00000000000000000000000000000000007777000077330000000000000000000000000000000000
6666666666666666bbbbbb3bbbbbbbbb66666666bbbb3bbb00000000000000000000000000000000071771700717733000003000000000000000000000000000
5555555566666666b3bbbbbbbbbbb3bb66666666bbb333bb00000000000000000000000000000000077977700779777000073300000000000000000000000000
6666666666666666b3bbbbbbbbbbb3bb66666666bbbb3bbb00000000000000000000000000000000077977700779717000077330000000000000000000000000
6666666666666666bbbbbbbbbbbbbbbb66666666bbbbbbbb00000000000000000000000000000000007777000077770000797730000033000000000000000000
6666666666666666bbbbbbbbbbbbbbbb66666666bbbbbbbb00000000000000000000000000000000477777444777774400797170073333300000000000000000
00000000333333336000000600000000000444000004440000044400008800880088008800880088047774700477747007777770077777700000000000000000
000000003111111360111106000000000044ff000044ff000044ff00008e88e8008e88e8008e88e8074777700747777004777470047774700000000000000000
0000000031111113a011110600000000004ff100004ff100004ff1000008ee100008ee100008ee10007777000077770007477770074777700000000000000000
0000000033333336a0000006000000000404ff000404ff000404ff000008ee800008ee800008ee80077777700777777000777700007777700000000000000000
0000000033333336000005000000000040408808404088084040880800008e0800008e0800008e08777777777777777707777770077777770777770000000000
0000000055533336000000000000000004008880040088800400888000008e8000008e8000008e80777777777777777777777777777777777777777700000000
000000005a5333360000000000000000000011100000111000001110000088e0000088e0000088e0777777777777777777777777777777777747777700000000
00000000555333366000000600000000000010100001001000001001000080800008008000008008077777700777777077777777779977777499717700000000
666666665555555566666666000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
6666666655555555666ccc66000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
66666666555555556cccccc6000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
66666666555555556cccccc6000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
666666665555555566ccccc6000000000000000000000000dddddddddd1ddddd0000000000000000000000000000000000000000000000000000000000000000
666666665555555566ccccc6000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
6666666655555555666ccc66000000000000000000000000dddddddddddddd1d0000000000000000000000000000000000000000000000000000000000000000
666666665555555566666666000000000000000000000000dddddddddddddddd0000000000000000000000000000000000000000000000000000000000000000
66665555555566666666666666666666555555555555555566666666666666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666666666666666555555555555555566666666666666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666666666666666555555555555555566666666666666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666666666666666555555555555555566666666666667660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666555555556666555566666666555566666666666666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666555555556666555566666666555566666666667666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666555555556666555566666666555566666666666666660000000000000000000000000000000000000000000000000000000000000000
66665555555566666666555555556666555566666666555566666666666666660000000000000000000000000000000000000000000000000000000000000000
55555555666666666666555555556666555566666666555555555555555555550000000000000000000000000000000000000000000000000000000000000000
55555555666666666666555555556666555566666666555555555555555555550000000000000000000000000000000000000000000000000000000000000000
55555555666666666666555555556666555566666666555555555555555555550000000000000000000000000000000000000000000000000000000000000000
5555555566666666666655555555666655556666666655555555555555d555550000000000000000000000000000000000000000000000000000000000000000
66666666555555556666666666666666555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
6666666655555555666666666666666655555555555555555555555555555d550000000000000000000000000000000000000000000000000000000000000000
66666666555555556666666666666666555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
66666666555555556666666666666666555555555555555555555555555555550000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ccc00000cccc00000ccc0000cccc000ccccb0000cccb0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00fccc000cccccc000cc4f000011cc000ccccc0000cc110000000000000000000000000000000000000000000000000000000000000000000000000000000000
00fccc000cccccc000cc4f0000f1cc000ccccc0000cc1f0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00f4c1000cc11cc0001c4f0000f1c10001ccc100001c1f0000000000000000000000000000000000000000000000000000000000000000000000000000000000
004ccc0000cccc4000cccc0000cccc000ccccc0000cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ccce0000ccce0000eccc0000cccf000fcccf0000fccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055500005555000055500000066600006660000066600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00505500005005000055050000606600006060000066060000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ccc00000000000000ccc0000ccc0000bcccc00000bcc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cffcc000000000000c4ffc000f11c00c11111c000c11f0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c1fcc000000000000c4f1c0004f1c001f4f4f1000c1f40000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cff4c000000000000c4ffc000ff1c001fffff1000c1ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00c4c00000000000000c4c0000cccc00c1fff1c000cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ecce00000000000000ecce00fcfcc00cc111cc000ccfcf000000000000000000000000000000000000000000000000000000000000000000000000000000000
005550000000000000055500006666000ccccc000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000
00505000000000000005050000600600000000000060060000000000000000000000000000000000000000000000000000000000000000000000000000000000
00cccc0000cccc0000cccc0000ccc0000bccc00000cbcc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
04fffcc00cffffc00c4fffc000fffc000cfffc0000cfff0000000000000000000000000000000000000000000000000000000000000000000000000000000000
041f1cc0041f1fc00c41f1c0004f4100014f41000014f40000000000000000000000000000000000000000000000000000000000000000000000000000000000
04fff4c004ffff400c4fff4000fff10001fff100001fff0000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ccc40004ccc400004ccc0000cccc000ccccc0000cccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000
0eecce000eccce0000eccee00ffccf000fcccf0000fccff000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055500005555000055500000066600006660000066600000000000000000000000000000000000000000000000000000000000000000000000000000000000
00505500005005000055050000606600006060000066060000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
88888eeeeee888eeeeee888eeeeee888eeeeee888777777888eeeeee888eeeeee888888888888888888ff8ff8888228822888222822888888822888888228888
8888ee888ee88ee88eee88ee888ee88ee888ee88778787788ee888ee88ee8eeee88888888888888888ff888ff888222222888222822888882282888888222888
888eee8e8ee8eeee8eee8eeeee8ee8eeeee8ee8777878778eee8eeee8eee8eeee88888e88888888888ff888ff888282282888222888888228882888888288888
888eee8e8ee8eeee8eee8eee888ee8eeee88ee8777888778eee888ee8eee888ee8888eee8888888888ff888ff888222222888888222888228882888822288888
888eee8e8ee8eeee8eee8eee8eeee8eeeee8ee8777778778eeeee8ee8eee8e8ee88888e88888888888ff888ff888822228888228222888882282888222288888
888eee888ee8eee888ee8eee888ee8eee888ee8777778778eee888ee8eee888ee888888888888888888ff8ff8888828828888228222888888822888222888888
888eeeeeeee8eeeeeeee8eeeeeeee8eeeeeeee8777777778eeeeeeee8eeeeeeee888888888888888888888888888888888888888888888888888888888888888
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1eee1e1e1ee111ee1eee1eee11ee1ee1111116661666166616611666166616661111166616611666166616661666161116661666166611711171111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111116661616161616161616116116161171116116161161116111611616161111611116161117111117111111111111
1ee11e1e1e1e1e1111e111e11e1e1e1e111116161666166616161666116116661111116116161161116111611666161111611161166117111117111111111111
1e111e1e1e1e1e1111e111e11e1e1e1e111116161616161116161616116116161171116116161161116111611616161111611611161117111117111111111111
1e1111ee1e1e11ee11e11eee1ee11e1e111116161616161116661616116116161111166616161666116116661616166616661666166611711171111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e1111ee11ee1eee1e1111111666166616661111166616661611166611661111111111111177177111111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111666161616161111116111611611161116111111177711111171117111111111111111111111111111111111111111111111
11111e111e1e1e111eee1e1111111616166616661111116111611611166116661111111111111771117711111111111111111111111111111111111111111111
11111e111e1e1e111e1e1e1111111616161616111111116111611611161111161111177711111171117111111111111111111111111111111111111111111111
11111eee1ee111ee1e1e1eee11111616161616111666116116661666166616611111111111111177177111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111116111166116611711c1c11cc1ccc1cc11ccc1ccc1ccc1ccc1ccc1cc111cc11111ccc1ccc1ccc11111ccc1ccc1c111ccc11cc1c1c11711111111111111111
111116111616161117111c1c1c111c111c1c1c111c1c1c1c11c111c11c1c1c1111111ccc1c1c1c1c111111c111c11c111c111c111c1c11171111111111111111
1111161116161611171111111c111cc11c1c1cc11cc11ccc11c111c11c1c1c1111111c1c1ccc1ccc111111c111c11c111cc11ccc111111171111111111111111
1111161116161616171111111c1c1c111c1c1c111c1c1c1c11c111c11c1c1c1c11111c1c1c1c1c11111111c111c11c111c11111c111111171111111111111111
1111166616611666117111111ccc1ccc1c1c1ccc1c1c1c1c11c11ccc1c1c1ccc11111c1c1c1c1c11111111c11ccc1ccc1ccc1cc1111111711111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee11ee1eee1111161611111ccc11111cc11ccc11111ee111ee111111111111111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e1e1111161617771c1c111111c11c1111111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
11111ee11e1e1ee11111166611111c1c111111c11ccc11111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e1e1111111617771c1c117111c1111c11111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111
11111e111ee11e1e1111166611111ccc17111ccc1ccc11111eee1ee1111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111eee11ee1eee1111161611111ccc11111cc11ccc11111ee111ee11111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e1111161617771c1c111111c11c1111111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111
111111111ee11e1e1ee11111116111111c1c111111c11ccc11111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e1111161617771c1c117111c1111c11111e1e1e1e11111111111111111111111111111111111111111111111111111111111111111111
111111111e111ee11e1e1111161611111ccc17111ccc1ccc11111eee1ee111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111116111166116611711616111111111c1c11111c1c1111111116161171111111111111111111111111111111111111111111111111111111111111
11111111111116111616161117111616111111111c1c11111c1c1111111116161117111111111111111111111111111111111111111111111111111111111111
11111111111116111616161117111161111111111111111111111111111116661117111111111111111111111111111111111111111111111111111111111111
1111111111111611161616161711161611111111111111c111111111111111161117111111111111111111111111111111111111111111111111111111111111
111111111111166616611666117116161171117111111c1111111171117116661171111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111161111661166117116161111161617171cc11c111171111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111611161616111711161611711616117111c11c111117111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111611161616111711116117771666177711c11ccc1117111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111611161616161711161611711116117111c11c1c1117111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616611666117116161111166617171ccc1ccc1171111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111116111116116611711c1c1ccc1cc11cc11ccc1cc111cc11111c1c111111111111111116161111161617171cc11c11117111111111111111111111
11111111111116111171161117111c1c1c1c1c1c1c1c11c11c1c1c1111111c1c1111111111111111161611711616117111c11c11111711111111111111111111
111111111111161111771611171111111ccc1c1c1c1c11c11c1c1c11111111111111111111111111116117771666177711c11ccc111711111111111111111111
111111111111161111777116171111111c1c1c1c1c1c11c11c1c1c1c111111111111111111111111161611711116117111c11c1c111711111111111111111111
111111111111166611777716117111111c1c1ccc1ccc1ccc1c1c1ccc11111111111111711171111116161111166617171ccc1ccc117111111111111111111111
11111111111111111177111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616117166111116661666161116661166177116161111161617171cc11c111177111111111111166616661666166616661611166611111661
1111111111111666161616161111116111611611161116111711161611711616117111c11c111117111117771111166616161616116111611611161111711616
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc1117111111111111161616661666116111611611166111111616
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c1117111117771111161616161611116111611611161111711616
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc1177111111111111161616161611116116661666166611111616
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616661666111116661666161116661166177116161111161617171cc11c111177111116161111111111111616111111111111111111111111
1111111111111666161616161111116111611611161116111711161611711616117111c11c111117111116161111177711111616111111111111111111111111
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc1117111111611111111111111161111111111111111111111111
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c1117111116161111177711111616111111111111111111111111
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc1177117116161111111111111616111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616661666111116661666161116661166177116161111161617171cc11c111177111116161111111111111616111111111111111111111111
1111111111111666161616161111116111611611161116111711161611711616117111c11c111117111116161111177711111616111111111111111111111111
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc1117111116661111111111111666111111111111111111111111
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c1117111111161111177711111116111111111111111111111111
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc1177117116661111111111111666111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616661666111116661666161116661166177116161111161617171cc11c111177111116661661166111711c111ccc11711111111111111111
1111111111111666161616161111116111611611161116111711161611711616117111c11c111117117116161616161617111c111c1111171111111111111111
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc1117111116661616161617111ccc1ccc11171111111111111111
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c1117117116161616161617111c1c111c11171111111111111111
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc1177111116161666166611711ccc1ccc11711111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616661666111116661666161116661166177116161111161617171cc11c111177111116661661166111711c111c1c11711111111111111111
1111111111111666161616161111116111611611161116111711161611711616117111c11c111117117116161616161617111c111c1c11171111111111111111
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc1117111116661616161617111ccc1ccc11171111111111111111
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c1117117116161616161617111c1c111c11171111111111111111
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc1177111116161666166611711ccc111c11711111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111111166616661666111116661666161116661166177116161111161617171cc11c111177111116661661166111711ccc1ccc11711111111111111111
1111111111111666161616161111116111611611161116111711161611711616117111c11c11111711711616161616161711111c1c1c11171111111111111111
1111111111111616166616661111116111611611166116661711116117771666177711c11ccc111711111666161616161711111c1c1c11171111111111111111
1111111111111616161616111111116111611611161111161711161611711116117111c11c1c111711711616161616161711111c1c1c11171111111111111111
111111111111161616161611166611611666166616661661177116161111166617171ccc1ccc117711111616166616661171111c1ccc11711111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111eee1ee11ee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111ee11e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111e111e1e1e1e111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111111111eee1e1e1eee111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111161111661166117116661166116616661666166616611166117116661666166611111666166616111666116611711171111111111111111111111111
11111111161116161611171111611616161111611616116116161611171116661616161611111161116116111611161111171117111111111111111111111111
11111111161116161611171111611616166611611661116116161611171116161666166611111161116116111661166611171117111111111111111111111111
11111111161116161616171111611616111611611616116116161616171116161616161111111161116116111611111611171117111111111111111111111111
11111111166616611666117111611661166111611616166616161666117116161616161116661161166616661666166111711171111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee1ee11ee11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111ee11e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111e111e1e1e1e1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111eee1e1e1eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
82888222822882228888822282228882822882228222888888888888888888888888888888888888888882228222822282228882822282288222822288866688
82888828828282888888888282828828882888828282888888888888888888888888888888888888888888828882888282828828828288288282888288888888
82888828828282288888822282828828882888828222888888888888888888888888888888888888888888228222882282228828822288288222822288822288
82888828828282888888828882828828882888828882888888888888888888888888888888888888888888828288888282828828828288288882828888888888
82228222828282228888822282228288822288828882888888888888888888888888888888888888888882228222822282228288822282228882822288822288
88888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888

__map__
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4343434343434343434343434343434300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2424242424242424242424242424242400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000030000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000007000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
010100200d0500f0500d0500f05001700067000070006700107000e7000d7000f700167001c700207002b7002e700307003770000700017000b70001700007000170000700007000070000700007000170001700
0601000032700307002f7102c7202a73029740267502475021750217501f7501c7501d7401b7201772014720107200f7200973007760047500174000740017500075007750017500075000750007000070000700
04010000000000272404734077440b7440d7440f75410754117501375414754157441574015740167401c7401c740227302e730327501b7001c7001d700007001a700227002470026700297002d7002e70000000
030100000040000400024500245003450034500345004450034500345000400004000040000400004000040001400014000140002400024000240002400014500145001450014500145001450014500145000400
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1910000018010000001c010000001c0101c00018010000001c0101c0151c00000000000000000000000000001a010000001d010000001d010000001a010000001d0101d015000000000000000000000000000000
__music__
03 08424344

